recursive.dectobin <- function(decimal){
if(decimal == 0){
message <- "0"
return (message)
} else{
bit <- decimal%%2
decimal <- decimal%/%2;
message <- paste0(bit,recursive.dectobin(decimal%%2))
}
}
recursive.dectobin(1)
recursive.dectobin(0)
recursive.dectobin(1)
recursive.dectobin(2)
recursive.dectobin(3)
recursive.dectobin <- function(decimal){
if(decimal == 0){
message <- "0"
return (message)
} else{
bit <- decimal%%2
decimal <- decimal%/%2;
nextpart <- recursive.dectobin(decimal)
message <- paste0(bit,nextpart)
}
return (message)
}
recursive.dectobin(3)
recursive.dectobin(0)
recursive.dectobin(1)
recursive.dectobin(2)
recursive.dectobin(3)
recursive.dectobin(0)
recursive.dectobin(1)
recursive.dectobin(2)
recursive.dectobin(3)
recursive.dectobin(4)
recursive.dectobin <- function(decimal){
if(decimal == 0){
message <- "0"
return (message)
} else{
bit <- decimal%%2
decimal <- decimal%/%2;
nextpart <- recursive.dectobin(decimal)
message <- paste0(nextpart,bit)
}
return (message)
}
recursive.dectobin(1)
recursive.dectobin(2)
recursive.dectobin(3)
recursive.dectobin(4)
recursive.dectobin(5)
recursive.dectobin(6)
recursive.dectobin(7)
recursive.dectobin(8)
recursive.dectobin(52)
clc
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.dectobin <- function(decimal){
if(decimal == 0){
message <- "0"
return (message)
} else{
bit <- decimal%%2
decimal <- decimal%/%2;
nextpart <- recursive.dectobin(decimal)
message <- paste0(nextpart,bit)
}
return (message)
}
#5 test cases for decimal to binary
for (i in 1:5){
decimal <- as.integer(readline("Enter the decimal number"))
recursive.dectobin(decimal)
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.dectobin <- function(decimal){
if(decimal == 0){
message <- "0"
return (message)
} else{
bit <- decimal%%2
decimal <- decimal%/%2;
nextpart <- recursive.dectobin(decimal)
message <- paste0(nextpart,bit)
}
return (message)
}
#5 test cases for decimal to binary
for (i in 1:5){
decimal <- as.integer(readline("Enter the decimal number"))
print(recursive.dectobin(decimal))
}
substr("abcdef", 2, 4)
substr("abcdef",6)
substr("abcdef",6,6)
substr("abcdef",5,5)
recursive.bintodec <- function(binary , i){
if(nchar(binary) > 0)
{
number <- as.integer(substr(binary,i,i))*(2**i) + recursive.bintodec(substr(binary,1,i-1),i+1)
return (number)
}
}
recursive.bintodec(0)
recursive.bintodec(0,0)
recursive.bintodec(01,0)
recursive.bintodec(1,0)
recursive.bintodec(1,1)
recursive.bintodec <- function(binary , i){
if(nchar(binary) > 0)
{
number <- as.integer(substr(binary,i,i))*(2**i) + as.integer(recursive.bintodec(substr(binary,1,i-1),i+1))
print(number)
return (number)
}
}
recursive.bintodec(1,0)
recursive.bintodec <- function(binary , i){
if(nchar(binary) > 0)
{
index <- nchar(binary) - i;
bitvalue <- as.integer(substr(binary,index,index))*(2**i)
number <- bitvalue + as.integer(recursive.bintodec(substr(binary,1,index-1),i+1))
print(number)
return (number)
}
}
recursive.bintodec(1,0)
length<- nchar("abcd")
substr(abcd,length,length)
substr("abcd",length,length)
substr("abcd",1,length-1)
nchar("")
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(2**i)
number <- bitvalue + as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
print(number)
return (number)
}
}
recursive.bintodec(1,0)
recursive.bintodec(0,0)
recursive.bintodec(1,0)
recursive.bintodec(1,0)
recursive.bintodec(1,0)
recursive.bintodec(1,0)
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
print(substr(binary,length,length))
number <- bitvalue + as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
return (number)
}
}
recursive.bintodec(1,0)
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
print(bitvalue)
number <- bitvalue + as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
return (number)
}
}
recursive.bintodec(1,0)
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
print(bitvalue)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
recursive.bintodec(1,0)
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
print(bitvalue)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
}
}
recursive.bintodec(0)
recursive.bintodec(1)
recursive.bintodec(2)
recursive.bintodec(10)
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
recursive.bintodec(10)
recursive.bintodec(1)
recursive.bintodec(100)
recursive.bintodec("100")
recursive.bintodec(100 , 0)
recursive.bintodec(100 , 0)
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(1)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
decimal <- as.integer(readline("Enter the decimal number"))
print(recursive.bintodec(decimal))
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(2**i)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
decimal <- as.integer(readline("Enter the decimal number"))
print(recursive.bintodec(decimal))
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length))*(2**i)
if(length > 1){
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i+1))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(decimal,0))
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length)) * i
if(length > 1){
i <- 2*i
nextvalue <- as.integer(recursive.bintodec(substr(binary,1,length-1),i))
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(decimal,0))
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length)) * i
i <- 2*i
if(length > 1){
nextvalue <- recursive.bintodec(substr(binary,1,length-1),i)
} else {
nextvalue <- 0
}
print(bitvalue)
print(nextvalue)
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(decimal,0))
}
adf
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length)) * i
i <- 2*i
if(length > 1){
nextvalue <- recursive.bintodec(substr(binary,1,length-1),i)
} else {
nextvalue <- 0
}
print(bitvalue)
print(nextvalue)
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(decimal,1))
}
sdv
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length)) * i
i <- 2*i
if(length > 1){
nextvalue <- recursive.bintodec(substr(binary,1,length-1),i)
} else {
nextvalue <- 0
}
print(bitvalue)
print(nextvalue)
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(binary,1))
}
#18BCD7008
#Kathal Aditya Rajendra
#Lab6
recursive.bintodec <- function(binary , i){
length <- nchar(binary)
if(length > 0)
{
bitvalue <- as.integer(substr(binary,length,length)) * i
i <- 2*i
if(length > 1){
nextvalue <- recursive.bintodec(substr(binary,1,length-1),i)
} else {
nextvalue <- 0
}
number <- bitvalue + nextvalue
return (number)
}
}
#5 test cases for decimal to binary
for (i in 1:5){
binary <- readline("Enter the binary string")
print(recursive.bintodec(binary,1))
}
rm(list = ls())
cls
rm(list = ls())
library(installR)
install.packages("installR")
install.packages("installr")
library(installr)
R.version.string
updateR()
rm(list = ls())
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyr)
library(tm)
library(textstem)
library(tidytext)
library(wordcloud2)
library(pROC)
library(ROCR)
library(randomForest)
library(naivebayes)
library(caret)
library(janeaustenr)
library(igraph)
library(ggraph)
## Importing data
fake_news <- read_csv('Fake.csv')
true_news <- read_csv('True.csv')
##Dropping NA rows
true_news <- true_news %>% drop_na()
fake_news <- fake_news %>% drop_na()
## Merging Datasets
fake_news$type <- 0
true_news$type <- 1
news <- bind_rows(fake_news, true_news)
news$type <- as.factor(news$type)
type = news$type
news$text <- paste(news$title , news$text , sep = ' ')
news <- cbind(news["text"] , type)
setwd("C:/Users/Ak/Desktop/SEM5/Project/DA/Coding")
fake_news <- read_csv('Fake.csv')
true_news <- read_csv('True.csv')
##Dropping NA rows
true_news <- true_news %>% drop_na()
fake_news <- fake_news %>% drop_na()
## Merging Datasets
fake_news$type <- 0
true_news$type <- 1
news <- bind_rows(fake_news, true_news)
news$type <- as.factor(news$type)
type = news$type
news$text <- paste(news$title , news$text , sep = ' ')
news <- cbind(news["text"] , type)
news$text <- as.character(news$text)
fake_news <- news%>%filter(type == 0)
true_news <- news%>%filter(type == 1)
tokeniztion_df_fake <- fake_news %>% unnest_tokens(word, text)
tokeniztion_df_fake <- tokeniztion_df_fake %>% anti_join(stop_words)
tokeniztion_df_fake %>% count(word, sort = TRUE) %>% filter(n > 10000) %>% mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL)
tokeniztion_df_fake %>% count(word, sort = TRUE) %>% filter(n > 10000) %>% mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word)) +
geom_col() +
labs(y = NULL) +
theme_minimal()
tokeniztion_df_fake %>% count(word, sort = TRUE) %>% filter(n > 10000) %>% mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word , fill = n)) +
geom_col() +
labs(y = NULL) +
theme_minimal()
tokeniztion_df_true <- true_news %>% unnest_tokens(word, text)
tokeniztion_df_true <- tokeniztion_df_true %>% anti_join(stop_words)
tokeniztion_df_true %>% count(word, sort = TRUE) %>% filter(n > 10000) %>% mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word,fill = n)) +
geom_col() +
labs(y = NULL)+
theme_minimal()
#Bigram - Fake_News
df_bigrams <-  fake_news %>% unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigrams_separated <- df_bigrams %>% separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>% filter(!word2 %in% stop_words$word)
